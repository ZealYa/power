[General]
image-path=../../images
tkenv-plugin-path = ../../../inet/etc/plugins
output-scalar-file-append = false
debug-on-errors = false
tkenv-default-config = 
sim-time-limit=18s
warmup-period=0s
repeat = 1
**.routingRecorder.enabled = false

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${repetition}.vec
seed-set = ${repetition}
**.vector-recording = true

################ Channel parameters #####################
**.channelControl.pMax = 10W
**.channelControl.alpha = 1.0
**.channelControl.carrierFrequency = 2100e+6Hz

################ PhyLayer parameters #####################
**.nic.phy.channelModel=xmldoc("config_channel.xml")
**.feedbackComputation = xmldoc("config_channel.xml")

################ Mobility parameters #####################
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m

################# Deployer parameters #######################
# UEs attached to eNB
**.fbDelay = 1

############### AMC MODULE PARAMETERS ###############
**.rbAllocationType = "localized"
**.deployer.numRbDl = 50
**.deployer.numRbUl = 50
**.numBands = 50


############### Config "SinglePair" ###############
# Nao rodar essa configuracao. Serve apenas de base para "SinglePair-UDP-*" and "SinglePair-TCP-*" 
# It includes two UEs served by one eNodeB. UEs are far from the eNB (~50m), but close to each other (20m)  
[Config SinglePair]
network=lte.simulations.networks.SingleCell_D2D

### eNodeBs configuration ###
*.eNodeB.mobility.initFromDisplayString = false
*.eNodeB.mobility.initialX = 300m
*.eNodeB.mobility.initialY = 300m

### UEs configuration ###
*.numUeCell = 0
*.numUeD2DTx = 2
*.numUeD2DRx = 2

*.ue*[0].macCellId = 1
*.ue*[0].masterId = 1
*.ue*[1].macCellId = 1
*.ue*[1].masterId = 1
*.ue*[0].mobility.initFromDisplayString = false

# Place D2D endpoints far from the eNodeB (~50m) and close to each other (20m)
*.ueD2DTx[0].mobility.initialX = 190m  #original 290
*.ueD2DTx[0].mobility.initialY = 350m  #original 350
*.ueD2DRx[0].mobility.initialX = 410m  #original 310
*.ueD2DRx[0].mobility.initialY = 350m  #original 350


############### Config "SinglePair-UDP-Infra" ###############
# In this configuration, UEs run a VoIP application (using UDP as transport layer protocol)
# They communicate using the traditional infrastructure mode (two-hop path through the eNodeB)
[Config SinglePair-UDP-D2D]
extends=SinglePair

### Traffic configuration ###
*.ueD2D*[0].numUdpApps = 1

# Traffic between UEs (ueD2DTx[0] --> ueD2DRx[0])
# Transmitter
*.ueD2DTx[0].udpApp[*].typename = "VoIPSender"
*.ueD2DTx[0].udpApp[*].localPort = 3088+ancestorIndex(0) 
*.ueD2DTx[0].udpApp[*].startTime = uniform(0s,0.02s)
*.ueD2DTx[0].udpApp[*].destAddress = "ueD2DRx[0]"
*.ueD2DTx[0].udpApp[*].destPort = 1000
# Receiver
*.ueD2DRx[0].udpApp[*].typename = "VoIPReceiver"
*.ueD2DRx[0].udpApp[*].localPort = 1000

# Enable D2D for the eNodeB and the UEs involved in direct communications
*.eNodeB.d2dCapable = true
*.ueD2D*[*].d2dCapable = true
**.amcMode = "D2D"

# --- Set the D2D peering capabilities ---#
# For each D2D-capable UE, write a list of UEs (separated by blank spaces) representing the possible peering UEs. 
# Note that this relationship is unidirectional. Here, ueD2DTx[0] --> ueD2DRx[0]
*.ueD2DTx[0].nic.d2dPeerAddresses = "ueD2DRx[0]"

# --- Select CQI for D2D transmissions --- #
# To enable the reporting of CQIs for each D2D link, set the parameter *.eNodeB.nic.phy.enableD2DCqiReporting
# To use fixed CQI, set the parameter **.usePreconfiguredTxParams and select the desired CQI using the parameter **.d2dCqi
*.eNodeB.nic.phy.enableD2DCqiReporting = true
**.usePreconfiguredTxParams = false
**.d2dCqi = 7

# --- Set power consumption ---#
**.energyConsumerType = "AlternatingEnergyConsumerSimuLTE"
*.ueD2DTx[*].energyConsumer.powerConsumption = 100mW
*.ueD2DRx[*].energyConsumer.powerConsumption = 900mW
*.ueD2DTx[*].energyConsumer.consumptionInterval = 5s
*.ueD2DRx[*].energyConsumer.consumptionInterval = 5s
*.ueD2DTx[*].energyConsumer.sleepInterval = 2s
*.ueD2DRx[*].energyConsumer.sleepInterval = 2s
*.ueD2DTx[*].energyConsumer.transmittingPowerConsumption = 500mW
*.ueD2DRx[*].energyConsumer.transmittingPowerConsumption = 0mW

**.energyStorageType = "SimpleEnergyStorage"		### Joelias // De IdealEnergyStorage para SimpleEnergyStorage
**.energyStorage.nominalCapacity = 0.80J  #1.0		### Joelias
**.energyStorage.nodeShutdownCapacity = 0J			### Joelias
**.energyStorage.nodeStartCapacity = 0.6J  # 0.5 * this.nominalCapacity		  #0.5		### Joelias
**.energyStorage.initialCapacity = 0.7J #uniform(0J, this.nominalCapacity)  #0.9		### Joelias
**.hasStatus = true										### Joelias


#*.ueD2D*[*].energyConsumerType = "StateBasedEnergyConsumer"
#*.ueD2D*[*].energyConsumer.offPowerConsumption = 0mW
#*.ueD2D*[*].energyConsumer.sleepPowerConsumption = 1mW
#*.ueD2D*[*].energyConsumer.switchingPowerConsumption = 1mW
#*.ueD2D*[*].energyConsumer.receiverIdlePowerConsumption = 2mW
#*.ueD2D*[*].energyConsumer.receiverBusyPowerConsumption = 5mW
#*.ueD2D*[*].energyConsumer.receiverReceivingPowerConsumption = 10mW
#*.ueD2D*[*].energyConsumer.transmitterIdlePowerConsumption = 2mW
#*.ueD2D*[*].energyConsumer.transmitterTransmittingPowerConsumption = 100mW

#**.energyStorageType = "IdealEnergyStorage"